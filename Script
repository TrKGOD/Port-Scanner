#!/usr/bin/python3
# PortScanner Checkpoint - FIAP
# Autor: Tarek Ayache
# Objetivo: - Criar um programa em Python que seja capaz de executar o scanneamento de hosts com o objetivo de obter informações de hosts (locais e remotos)

# Módulos a serem importados

from socket import socket, AF_INET, SOCK_STREAM
import scapy.all as scapy
import argparse
import threading
import time

# Irá realizar a leitura de sistema operacional da máquina

def cleanTerminal():
    if platform.system() == "Windows":
        return os.system("cls")
    else:
        return os.system("clear")
    
    # Lista de parser com as diversas opções do programa

def get_arguments():
    parser = argparse.ArgumentParser(description="Port Scanner")
    parser.add_argument("-t", "--target", action="store", help="Essa opção scaneia por portas apertas, caso nada seja selecionado o localhost será scaneado")
    parser.add_argument("-p", "--ports", action="store", help="Essa opção pede para que o usuário dê uma porta ou um range de portas a serem scaneadas (1-65535).")
    parser.add_argument("-w", "--web", action="store", help="Essa opção scaneia as portas 80/433 em busca de web servers")
    parser.add_argument("-o", "--options", action="store", help="Uma das três opções podem ser selecionadas: 1 - Scanear pelas 10 portas mais acessadas, 2 - Scanear as portas privilegiadas (1-1023), 3 -Scanear todas as portas.")
    parser.add_argument("-d", "--dump", dest="dump", action="store_true", help="log de portas apertas")
    args = parser.parse_args()

    if not args.target:
        print("Scanning localhost...")
        quit()

    if not args.ports and not args.options and not args.web:
        args.ports = "1-65535"

    if args.web:
        print("Scaneando portas 80 e 443...")
        args.ports = [80, 443]

    if args.options:
        if args.ports:
            print("Scaneado as portas...")
        if args.options == "1":
            args.ports = [20, 21, 22, 23, 25, 53, 80, 110, 119, 443]
        elif args.options == "2":
            print("opção não válida")
        elif args.options == "3":
            print("opção não válida")
        else:
            print("opção inválida, programa fechado.")
            quit()

    return args


# Escaneamento  de portas do programa
class PortScanner:
    def __init__(self, target, ports, options):

        self.target = target
        self.ports = ports
        self.options = options

    # Função que irá realizar a  verificação se a porta está aberta por meio do 'socket'
    def scan_ports(self, port):
        s = socket(AF_INET, SOCK_STREAM)
        s.settimeout(2)

        try:

            s.connect((self.target, port))
            port = "{0}".format(port)

            try:
                banner = s.recv(1024).decode()
                print("Porta {0} está aperta com o banner {1}.".format(port, banner))
            except:
                print("Porta {0} está aperta.".format(port))

            s.close()
        except:
            pass

    def scan(self):
        print("\nScanneando IP: {0}...".format(self.target))

        if (isinstance(args.ports, str)):
            initial_port = int(self.ports.split("-")[0])
            last_port = int(self.ports.split("-")[1])
            self.ports = list(range(initial_port, last_port + 1))

        start_time = time.time()
        for port in self.ports:
            thread = threading.Thread(target=self.scan_ports(port), args=[port])
            thread.start()
        end_time = time.time()
